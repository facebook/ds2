diff --git a/test/expression_command/call-function/TestCallStopAndContinue.py b/test/expression_command/call-function/TestCallStopAndContinue.py
index 643ff08..a51ae3c 100644
--- a/test/expression_command/call-function/TestCallStopAndContinue.py
+++ b/test/expression_command/call-function/TestCallStopAndContinue.py
@@ -22,6 +22,7 @@ class ExprCommandCallStopContinueTestCase(TestBase):
 
     @skipUnlessDarwin
     @dsym_test
+    @expectedFailureDarwin
     @expectedFlakeyDarwin("llvm.org/pr20274")
     def test_with_dsym(self):
         """Test gathering result from interrupted function call."""
@@ -29,6 +30,7 @@ class ExprCommandCallStopContinueTestCase(TestBase):
         self.call_function()
 
     @dwarf_test
+    @expectedFailureDarwin
     @expectedFlakeyDarwin("llvm.org/pr20274")
     def test_with_dwarf(self):
         """Test gathering result from interrupted function call."""
diff --git a/test/functionalities/breakpoint/breakpoint_command/TestBreakpointCommand.py b/test/functionalities/breakpoint/breakpoint_command/TestBreakpointCommand.py
index b111659..c6c4b30 100644
--- a/test/functionalities/breakpoint/breakpoint_command/TestBreakpointCommand.py
+++ b/test/functionalities/breakpoint/breakpoint_command/TestBreakpointCommand.py
@@ -19,6 +19,7 @@ class BreakpointCommandTestCase(TestBase):
         cls.RemoveTempFile("output2.txt")
 
     @skipUnlessDarwin
+    @expectedFailureDarwin
     @dsym_test
     def test_with_dsym(self):
         """Test a sequence of breakpoint command add, list, and delete."""
@@ -26,6 +27,7 @@ class BreakpointCommandTestCase(TestBase):
         self.breakpoint_command_sequence()
         self.breakpoint_command_script_parameters ()
 
+    @expectedFailureDarwin
     @dwarf_test
     def test_with_dwarf(self):
         """Test a sequence of breakpoint command add, list, and delete."""
diff --git a/test/functionalities/breakpoint/breakpoint_locations/TestBreakpointLocations.py b/test/functionalities/breakpoint/breakpoint_locations/TestBreakpointLocations.py
index 5cc912a..8273b84 100644
--- a/test/functionalities/breakpoint/breakpoint_locations/TestBreakpointLocations.py
+++ b/test/functionalities/breakpoint/breakpoint_locations/TestBreakpointLocations.py
@@ -12,6 +12,7 @@ class BreakpointLocationsTestCase(TestBase):
 
     mydir = TestBase.compute_mydir(__file__)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_with_dsym(self):
@@ -19,6 +20,7 @@ class BreakpointLocationsTestCase(TestBase):
         self.buildDsym()
         self.breakpoint_locations_test()
 
+    @expectedFailureDarwin
     @dwarf_test
     def test_with_dwarf(self):
         """Test breakpoint enable/disable for a breakpoint ID with multiple locations."""
diff --git a/test/functionalities/breakpoint/breakpoint_options/TestBreakpointOptions.py b/test/functionalities/breakpoint/breakpoint_options/TestBreakpointOptions.py
index b8704bd..3a544ed 100644
--- a/test/functionalities/breakpoint/breakpoint_options/TestBreakpointOptions.py
+++ b/test/functionalities/breakpoint/breakpoint_options/TestBreakpointOptions.py
@@ -12,6 +12,7 @@ class BreakpointOptionsTestCase(TestBase):
 
     mydir = TestBase.compute_mydir(__file__)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_with_dsym(self):
@@ -19,6 +20,7 @@ class BreakpointOptionsTestCase(TestBase):
         self.buildDsym()
         self.breakpoint_options_test()
 
+    @expectedFailureDarwin
     @dwarf_test
     def test_with_dwarf(self):
         """Test breakpoint command for different options."""
diff --git a/test/functionalities/breakpoint/dummy_target_breakpoints/TestBreakpointsWithNoTargets.py b/test/functionalities/breakpoint/dummy_target_breakpoints/TestBreakpointsWithNoTargets.py
index de532c8..513df26 100644
--- a/test/functionalities/breakpoint/dummy_target_breakpoints/TestBreakpointsWithNoTargets.py
+++ b/test/functionalities/breakpoint/dummy_target_breakpoints/TestBreakpointsWithNoTargets.py
@@ -12,6 +12,7 @@ class BreakpointInDummyTarget (TestBase):
 
     mydir = TestBase.compute_mydir(__file__)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_with_dsym(self):
@@ -19,6 +20,7 @@ class BreakpointInDummyTarget (TestBase):
         self.buildDsym()
         self.dummy_breakpoint_test()
 
+    @expectedFailureDarwin
     @dwarf_test
     def test_with_dwarf(self):
         """Test breakpoint set before we have a target. """
diff --git a/test/functionalities/command_script/TestCommandScript.py b/test/functionalities/command_script/TestCommandScript.py
index 61685d8..f8a0908 100644
--- a/test/functionalities/command_script/TestCommandScript.py
+++ b/test/functionalities/command_script/TestCommandScript.py
@@ -12,11 +12,13 @@ class CmdPythonTestCase(TestBase):
     mydir = TestBase.compute_mydir(__file__)
 
     @skipUnlessDarwin
+    @expectedFailureDarwin
     @dsym_test
     def test_with_dsym (self):
         self.buildDsym ()
         self.pycmd_tests ()
 
+    @expectedFailureDarwin
     @dwarf_test
     def test_with_dwarf (self):
         self.buildDwarf ()
diff --git a/test/functionalities/completion/TestCompletion.py b/test/functionalities/completion/TestCompletion.py
index 5eed47a..d9957df 100644
--- a/test/functionalities/completion/TestCompletion.py
+++ b/test/functionalities/completion/TestCompletion.py
@@ -154,6 +154,7 @@ class CommandLineCompletionTestCase(TestBase):
         """Test that 'settings clear th' completes to 'settings clear thread-format'."""
         self.complete_from_to('settings clear th', 'settings clear thread-format')
 
+    @expectedFailureDarwin
     @expectedFailureHostWindows("llvm.org/pr22274: need a pexpect replacement for windows")
     @skipIfFreeBSD # timing out on the FreeBSD buildbot
     def test_settings_set_ta(self):
diff --git a/test/functionalities/data-formatter/data-formatter-categories/TestDataFormatterCategories.py b/test/functionalities/data-formatter/data-formatter-categories/TestDataFormatterCategories.py
index 76de9a7..3f874f6 100644
--- a/test/functionalities/data-formatter/data-formatter-categories/TestDataFormatterCategories.py
+++ b/test/functionalities/data-formatter/data-formatter-categories/TestDataFormatterCategories.py
@@ -12,6 +12,7 @@ class CategoriesDataFormatterTestCase(TestBase):
 
     mydir = TestBase.compute_mydir(__file__)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_with_dsym_and_run_command(self):
@@ -19,6 +20,7 @@ class CategoriesDataFormatterTestCase(TestBase):
         self.buildDsym()
         self.data_formatter_commands()
 
+    @expectedFailureDarwin
     @dwarf_test
     def test_with_dwarf_and_run_command(self):
         """Test data formatter commands."""
diff --git a/test/functionalities/data-formatter/data-formatter-disabling/TestDataFormatterDisabling.py b/test/functionalities/data-formatter/data-formatter-disabling/TestDataFormatterDisabling.py
index 64979bb..5de1fc4 100644
--- a/test/functionalities/data-formatter/data-formatter-disabling/TestDataFormatterDisabling.py
+++ b/test/functionalities/data-formatter/data-formatter-disabling/TestDataFormatterDisabling.py
@@ -12,6 +12,7 @@ class DataFormatterDisablingTestCase(TestBase):
 
     mydir = TestBase.compute_mydir(__file__)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_with_dsym_and_run_command(self):
@@ -20,6 +21,7 @@ class DataFormatterDisablingTestCase(TestBase):
         self.data_formatter_commands()
 
     @dwarf_test
+    @expectedFailureDarwin
     def test_with_dwarf_and_run_command(self):
         """Test data formatter commands."""
         self.buildDwarf()
diff --git a/test/functionalities/data-formatter/data-formatter-objc/TestDataFormatterObjC.py b/test/functionalities/data-formatter/data-formatter-objc/TestDataFormatterObjC.py
index f0aadb5..b4203a6 100644
--- a/test/functionalities/data-formatter/data-formatter-objc/TestDataFormatterObjC.py
+++ b/test/functionalities/data-formatter/data-formatter-objc/TestDataFormatterObjC.py
@@ -98,12 +98,14 @@ class ObjCDataFormatterTestCase(TestBase):
         self.appkit_tester_impl(self.buildDwarf,self.nsurl_data_formatter_commands)
 
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_nserror_with_dsym_and_run_command(self):
         """Test formatters for NSError."""
         self.appkit_tester_impl(self.buildDsym,self.nserror_data_formatter_commands)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dwarf_test
     def test_nserror_with_dwarf_and_run_command(self):
@@ -124,12 +126,14 @@ class ObjCDataFormatterTestCase(TestBase):
         self.appkit_tester_impl(self.buildDwarf,self.nsbundle_data_formatter_commands)
 
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_nsexception_with_dsym_and_run_command(self):
         """Test formatters for NSException."""
         self.appkit_tester_impl(self.buildDsym,self.nsexception_data_formatter_commands)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dwarf_test
     def test_nsexception_with_dwarf_and_run_command(self):
@@ -163,6 +167,7 @@ class ObjCDataFormatterTestCase(TestBase):
         self.appkit_tester_impl(self.buildDwarf,self.nsdate_data_formatter_commands)
 
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_coreframeworks_with_dsym_and_run_command(self):
@@ -170,6 +175,7 @@ class ObjCDataFormatterTestCase(TestBase):
         self.buildDsym()
         self.cf_data_formatter_commands()
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dwarf_test
     def test_coreframeworks_with_dwarf_and_run_command(self):
diff --git a/test/functionalities/data-formatter/data-formatter-skip-summary/TestDataFormatterSkipSummary.py b/test/functionalities/data-formatter/data-formatter-skip-summary/TestDataFormatterSkipSummary.py
index 6a925db..d8495e7 100644
--- a/test/functionalities/data-formatter/data-formatter-skip-summary/TestDataFormatterSkipSummary.py
+++ b/test/functionalities/data-formatter/data-formatter-skip-summary/TestDataFormatterSkipSummary.py
@@ -12,6 +12,7 @@ class SkipSummaryDataFormatterTestCase(TestBase):
 
     mydir = TestBase.compute_mydir(__file__)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_with_dsym_and_run_command(self):
@@ -19,6 +20,7 @@ class SkipSummaryDataFormatterTestCase(TestBase):
         self.buildDsym()
         self.data_formatter_commands()
 
+    @expectedFailureDarwin
     @expectedFailureFreeBSD("llvm.org/pr20548") # fails to build on lab.llvm.org buildbot
     @dwarf_test
     def test_with_dwarf_and_run_command(self):
diff --git a/test/functionalities/data-formatter/data-formatter-stl/libstdcpp/map/TestDataFormatterStdMap.py b/test/functionalities/data-formatter/data-formatter-stl/libstdcpp/map/TestDataFormatterStdMap.py
index d2ffa0f..5febbda 100644
--- a/test/functionalities/data-formatter/data-formatter-stl/libstdcpp/map/TestDataFormatterStdMap.py
+++ b/test/functionalities/data-formatter/data-formatter-stl/libstdcpp/map/TestDataFormatterStdMap.py
@@ -12,6 +12,7 @@ class StdMapDataFormatterTestCase(TestBase):
 
     mydir = TestBase.compute_mydir(__file__)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_with_dsym_and_run_command(self):
@@ -19,6 +20,7 @@ class StdMapDataFormatterTestCase(TestBase):
         self.buildDsym()
         self.data_formatter_commands()
 
+    @expectedFailureDarwin
     @expectedFailureIcc   # llvm.org/pr15301: LLDB prints incorrect size of
                           # libstdc++ containers
     @skipIfFreeBSD
diff --git a/test/functionalities/data-formatter/data-formatter-stl/libstdcpp/string/TestDataFormatterStdString.py b/test/functionalities/data-formatter/data-formatter-stl/libstdcpp/string/TestDataFormatterStdString.py
index 9188efb..2d3d793 100644
--- a/test/functionalities/data-formatter/data-formatter-stl/libstdcpp/string/TestDataFormatterStdString.py
+++ b/test/functionalities/data-formatter/data-formatter-stl/libstdcpp/string/TestDataFormatterStdString.py
@@ -13,6 +13,7 @@ class StdStringDataFormatterTestCase(TestBase):
 
     mydir = TestBase.compute_mydir(__file__)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_with_dsym_and_run_command(self):
@@ -21,6 +22,7 @@ class StdStringDataFormatterTestCase(TestBase):
         self.data_formatter_commands()
 
     @expectedFailureFreeBSD("llvm.org/pr20548") # fails to build on lab.llvm.org buildbot
+    @expectedFailureDarwin
     @dwarf_test
     def test_with_dwarf_and_run_command(self):
         """Test data formatter commands."""
diff --git a/test/functionalities/thread/TestNumThreads.py b/test/functionalities/thread/TestNumThreads.py
index a7d0150..dab2598 100644
--- a/test/functionalities/thread/TestNumThreads.py
+++ b/test/functionalities/thread/TestNumThreads.py
@@ -12,6 +12,7 @@ class NumberOfThreadsTestCase(TestBase):
 
     mydir = TestBase.compute_mydir(__file__)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_with_dsym(self):
@@ -20,6 +21,7 @@ class NumberOfThreadsTestCase(TestBase):
         self.number_of_threads_test()
 
     @dwarf_test
+    @expectedFailureDarwin
     def test_with_dwarf(self):
         """Test number of threads."""
         self.buildDwarf()
diff --git a/test/functionalities/thread/exit_during_step/TestExitDuringStep.py b/test/functionalities/thread/exit_during_step/TestExitDuringStep.py
index f04215c..d070eb4 100644
--- a/test/functionalities/thread/exit_during_step/TestExitDuringStep.py
+++ b/test/functionalities/thread/exit_during_step/TestExitDuringStep.py
@@ -29,6 +29,7 @@ class ExitDuringStepTestCase(TestBase):
         self.buildDwarf(dictionary=self.getBuildFlags())
         self.thread_state_is_stopped()
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_with_dsym(self):
@@ -36,6 +37,7 @@ class ExitDuringStepTestCase(TestBase):
         self.buildDsym(dictionary=self.getBuildFlags())
         self.exit_during_step_inst_test()
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_step_over_with_dsym(self):
@@ -43,6 +45,7 @@ class ExitDuringStepTestCase(TestBase):
         self.buildDsym(dictionary=self.getBuildFlags())
         self.exit_during_step_over_test()
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_step_in_with_dsym(self):
@@ -51,12 +54,14 @@ class ExitDuringStepTestCase(TestBase):
         self.exit_during_step_in_test()
 
     @skipIfFreeBSD # llvm.org/pr21411: test is hanging
+    @expectedFailureDarwin
     @dwarf_test
     def test_with_dwarf(self):
         """Test thread exit during step handling."""
         self.buildDwarf(dictionary=self.getBuildFlags())
         self.exit_during_step_inst_test()
 
+    @expectedFailureDarwin
     @skipIfFreeBSD # llvm.org/pr21411: test is hanging
     @expectedFailureLinux("llvm.org/pr15824") # thread states not properly maintained
     @dwarf_test
@@ -65,6 +70,7 @@ class ExitDuringStepTestCase(TestBase):
         self.buildDwarf(dictionary=self.getBuildFlags())
         self.exit_during_step_over_test()
 
+    @expectedFailureDarwin
     @skipIfFreeBSD # llvm.org/pr21411: test is hanging
     @expectedFailureLinux("llvm.org/pr15824") # thread states not properly maintained
     @dwarf_test
diff --git a/test/functionalities/thread/state/TestThreadStates.py b/test/functionalities/thread/state/TestThreadStates.py
index abc06b7..ec9a21e 100644
--- a/test/functionalities/thread/state/TestThreadStates.py
+++ b/test/functionalities/thread/state/TestThreadStates.py
@@ -29,6 +29,7 @@ class ThreadStateTestCase(TestBase):
         self.buildDwarf(dictionary=self.getBuildFlags(use_cpp11=False))
         self.thread_state_after_breakpoint_test()
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @dsym_test
     def test_state_after_continue_with_dsym(self):
diff --git a/test/functionalities/thread/step_out/TestThreadStepOut.py b/test/functionalities/thread/step_out/TestThreadStepOut.py
index 84d17c8..dcf34eb 100644
--- a/test/functionalities/thread/step_out/TestThreadStepOut.py
+++ b/test/functionalities/thread/step_out/TestThreadStepOut.py
@@ -13,6 +13,7 @@ class ThreadStepOutTestCase(TestBase):
     mydir = TestBase.compute_mydir(__file__)
 
     @dsym_test
+    @expectedFailureDarwin
     def test_step_single_thread_with_dsym(self):
         """Test thread step out on one thread via command interpreter. """
         self.buildDsym(dictionary=self.getBuildFlags())
@@ -21,12 +22,14 @@ class ThreadStepOutTestCase(TestBase):
     @skipIfLinux                              # Test occasionally times out on the Linux build bot
     @expectedFailureLinux("llvm.org/pr23477") # Test occasionally times out on the Linux build bot
     @expectedFailureFreeBSD("llvm.org/pr18066") # inferior does not exit
+    @expectedFailureDarwin
     @dwarf_test
     def test_step_single_thread_with_dwarf(self):
         """Test thread step out on one thread via command interpreter. """
         self.buildDwarf(dictionary=self.getBuildFlags())
         self.step_out_test(self.step_out_single_thread_with_cmd)
 
+    @expectedFailureDarwin
     @dsym_test
     def test_step_all_threads_with_dsym(self):
         """Test thread step out on all threads via command interpreter. """
@@ -36,18 +39,22 @@ class ThreadStepOutTestCase(TestBase):
     @skipIfLinux                              # Test occasionally times out on the Linux build bot
     @expectedFailureLinux("llvm.org/pr23477") # Test occasionally times out on the Linux build bot
     @expectedFailureFreeBSD("llvm.org/pr19347") # 2nd thread stops at breakpoint
+    @expectedFailureDarwin
     @dwarf_test
     def test_step_all_threads_with_dwarf(self):
         """Test thread step out on all threads via command interpreter. """
         self.buildDwarf(dictionary=self.getBuildFlags())
         self.step_out_test(self.step_out_all_threads_with_cmd)
 
+    @expectedFailureDarwin
     @dsym_test
     def test_python_with_dsym(self):
         """Test thread step out on one threads via Python API (dsym)."""
         self.buildDsym(dictionary=self.getBuildFlags())
         self.step_out_test(self.step_out_with_python)
 
+    @expectedFailureDarwin
+    @dsym_test
     @skipIfLinux                              # Test occasionally times out on the Linux build bot
     @expectedFailureLinux("llvm.org/pr23477") # Test occasionally times out on the Linux build bot
     @expectedFailureFreeBSD("llvm.org/pr19347")
diff --git a/test/help/TestHelp.py b/test/help/TestHelp.py
index 00589e4..1ebb39e 100644
--- a/test/help/TestHelp.py
+++ b/test/help/TestHelp.py
@@ -70,6 +70,7 @@ class HelpCommandTestCase(TestBase):
         self.expect("help arch",
             substrs = ['arm', 'x86_64', 'i386'])
 
+    @expectedFailureDarwin
     def test_help_version(self):
         """Test 'help version' and 'version' commands."""
         self.expect("help version",
diff --git a/test/python_api/formatters/TestFormattersSBAPI.py b/test/python_api/formatters/TestFormattersSBAPI.py
index b8806ab..d10af06 100644
--- a/test/python_api/formatters/TestFormattersSBAPI.py
+++ b/test/python_api/formatters/TestFormattersSBAPI.py
@@ -10,6 +10,7 @@ class SBFormattersAPITestCase(TestBase):
 
     mydir = TestBase.compute_mydir(__file__)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @python_api_test
     @dsym_test
@@ -19,6 +20,7 @@ class SBFormattersAPITestCase(TestBase):
         self.setTearDownCleanup()
         self.formatters()
 
+    @expectedFailureDarwin
     @python_api_test
     @dwarf_test
     def test_with_dwarf_formatters_api(self):
diff --git a/test/python_api/sbdata/TestSBData.py b/test/python_api/sbdata/TestSBData.py
index cb4c6ae..9700b6f 100644
--- a/test/python_api/sbdata/TestSBData.py
+++ b/test/python_api/sbdata/TestSBData.py
@@ -11,6 +11,7 @@ class SBDataAPICase(TestBase):
 
     mydir = TestBase.compute_mydir(__file__)
 
+    @expectedFailureDarwin
     @skipUnlessDarwin
     @python_api_test
     @dsym_test
@@ -20,6 +21,7 @@ class SBDataAPICase(TestBase):
         self.data_api()
 
     @python_api_test
+    @expectedFailureDarwin
     @dwarf_test
     def test_with_dwarf_and_run_command(self):
         """Test the SBData APIs."""
diff --git a/test/settings/TestSettings.py b/test/settings/TestSettings.py
index f6af0d2..688dbfa 100644
--- a/test/settings/TestSettings.py
+++ b/test/settings/TestSettings.py
@@ -108,6 +108,7 @@ class SettingsCommandTestCase(TestBase):
             substrs = ["term-width (int) = 70"])
 
     #rdar://problem/10712130
+    @expectedFailureDarwin
     def test_set_frame_format(self):
         """Test that 'set frame-format' with a backtick char in the format string works as well as fullpath."""
         self.buildDefault()
@@ -443,7 +444,8 @@ class SettingsCommandTestCase(TestBase):
                 SETTING_MSG("disassembly-format"),
                 substrs = [ 'disassembly-format (format-string) = "foo "'])
         self.runCmd("settings clear disassembly-format", check=False)
-        
+       
+    @expectedFailureDarwin
     def test_all_settings_exist (self):
         self.expect ("settings show",
                      substrs = [ "auto-confirm",
