diff --git a/test/driver/batch_mode/TestBatchMode.py b/test/driver/batch_mode/TestBatchMode.py
index 39f5add..f3340da 100644
--- a/test/driver/batch_mode/TestBatchMode.py
+++ b/test/driver/batch_mode/TestBatchMode.py
@@ -24,7 +24,7 @@ class DriverBatchModeTest (TestBase):
         self.setTearDownCleanup()
         self.batch_mode ()
 
-    @unittest2.expectedFailure("<rdar://problem/18684124>, lldb doesn't reliably print the prompt when run under pexpect")
+#    @unittest2.expectedFailure("<rdar://problem/18684124>, lldb doesn't reliably print the prompt when run under pexpect")
     @expectedFailureWindows("llvm.org/pr22274: need a pexpect replacement for windows")
     @dwarf_test
     def test_driver_batch_mode_with_dwarf(self):
diff --git a/test/source-manager/TestSourceManager.py b/test/source-manager/TestSourceManager.py
index 5be75cb..2eb69e7 100644
--- a/test/source-manager/TestSourceManager.py
+++ b/test/source-manager/TestSourceManager.py
@@ -26,16 +26,19 @@ class SourceManagerTestCase(TestBase):
         lldb.skip_build_and_cleanup = False
 
     @python_api_test
+    @expectedFailureLinux
     def test_display_source_python(self):
         """Test display of source using the SBSourceManager API."""
         self.buildDefault()
         self.display_source_python()
 
+    @expectedFailureLinux
     def test_move_and_then_display_source(self):
         """Test that target.source-map settings work by moving main.c to hidden/main.c."""
         self.buildDefault()
         self.move_and_then_display_source()
 
+    @expectedFailureLinux
     def test_modify_source_file_while_debugging(self):
         """Modify a source file while debugging the executable."""
         self.buildDefault()
diff --git a/test/source-manager/main.c b/test/source-manager/main.c
index 9f62166..50fec57 100644
--- a/test/source-manager/main.c
+++ b/test/source-manager/main.c
@@ -1,6 +1,6 @@
 #include <stdio.h>
 
 int main(int argc, char const *argv[]) {
-    printf("Hello world.\n"); // Set break point at this line.
+    printf("Hello lldb.\n"); // Set break point at this line.
     return 0;
 }
diff --git a/test/tools/lldb-mi/TestMiGdbSetShow.py b/test/tools/lldb-mi/TestMiGdbSetShow.py
index cedfece..76cab58 100644
--- a/test/tools/lldb-mi/TestMiGdbSetShow.py
+++ b/test/tools/lldb-mi/TestMiGdbSetShow.py
@@ -62,7 +62,7 @@ class MiGdbSetShowTestCase(lldbmi_testcase.MiTestCaseBase):
     @lldbmi_test
     @expectedFailureWindows("llvm.org/pr22274: need a pexpect replacement for windows")
     @skipIfFreeBSD # llvm.org/pr22411: Failure presumably due to known thread races
-    @expectedFailureLinux # Failing in ~11/600 dosep runs (build 3120-3122)
+#    @expectedFailureLinux # Failing in ~11/600 dosep runs (build 3120-3122)
     def test_lldbmi_gdb_set_target_async_off(self):
         """Test that 'lldb-mi --interpreter' can execute commands in sync mode."""
 
diff --git a/test/tools/lldb-mi/interpreter/TestMiInterpreterExec.py b/test/tools/lldb-mi/interpreter/TestMiInterpreterExec.py
index eb4ff1c..6f5b3b5 100644
--- a/test/tools/lldb-mi/interpreter/TestMiInterpreterExec.py
+++ b/test/tools/lldb-mi/interpreter/TestMiInterpreterExec.py
@@ -55,7 +55,7 @@ class MiInterpreterExecTestCase(lldbmi_testcase.MiTestCaseBase):
     @lldbmi_test
     @expectedFailureWindows("llvm.org/pr22274: need a pexpect replacement for windows")
     @skipIfFreeBSD # llvm.org/pr22411: Failure presumably due to known thread races
-    @expectedFailureLinux  # Failing in ~9/600 dosep runs (build 3120-3122)
+#    @expectedFailureLinux  # Failing in ~9/600 dosep runs (build 3120-3122)
     def test_lldbmi_settings_set_target_run_args_before(self):
         """Test that 'lldb-mi --interpreter' can set target arguments by 'setting set target.run-args' command before than target was created."""
 
@@ -88,7 +88,7 @@ class MiInterpreterExecTestCase(lldbmi_testcase.MiTestCaseBase):
     @lldbmi_test
     @expectedFailureWindows("llvm.org/pr22274: need a pexpect replacement for windows")
     @skipIfFreeBSD # llvm.org/pr22411: Failure presumably due to known thread races
-    @expectedFailureLinux  # Failing in ~9/600 dosep runs (build 3120-3122)
+#    @expectedFailureLinux  # Failing in ~9/600 dosep runs (build 3120-3122)
     def test_lldbmi_settings_set_target_run_args_after(self):
         """Test that 'lldb-mi --interpreter' can set target arguments by 'setting set target.run-args' command after than target was created."""
 
diff --git a/test/tools/lldb-mi/variable/TestMiGdbSetShowPrint.py b/test/tools/lldb-mi/variable/TestMiGdbSetShowPrint.py
index eec4266..8cac4b0 100644
--- a/test/tools/lldb-mi/variable/TestMiGdbSetShowPrint.py
+++ b/test/tools/lldb-mi/variable/TestMiGdbSetShowPrint.py
@@ -103,6 +103,7 @@ class MiGdbSetShowTestCase(lldbmi_testcase.MiTestCaseBase):
     @expectedFailureWindows("llvm.org/pr22274: need a pexpect replacement for windows")
     @expectedFailureGcc("https://llvm.org/bugs/show_bug.cgi?id=23357")
     @skipIfFreeBSD # llvm.org/pr22411: Failure presumably due to known thread races
+    @expectedFailureLinux
     def test_lldbmi_gdb_set_show_print_expand_aggregates(self):
         """Test that 'lldb-mi --interpreter' can expand aggregates everywhere."""
 
@@ -160,6 +161,7 @@ class MiGdbSetShowTestCase(lldbmi_testcase.MiTestCaseBase):
     @expectedFailureWindows("llvm.org/pr22274: need a pexpect replacement for windows")
     @expectedFailureGcc("https://llvm.org/bugs/show_bug.cgi?id=23357")
     @skipIfFreeBSD # llvm.org/pr22411: Failure presumably due to known thread races
+    @expectedFailureLinux
     def test_lldbmi_gdb_set_show_print_aggregate_field_names(self):
         """Test that 'lldb-mi --interpreter' can expand aggregates everywhere."""
 
diff --git a/test/tools/lldb-server/gdbremote_testcase.py b/test/tools/lldb-server/gdbremote_testcase.py
index c3a1cca..30dc83b 100644
--- a/test/tools/lldb-server/gdbremote_testcase.py
+++ b/test/tools/lldb-server/gdbremote_testcase.py
@@ -239,13 +239,10 @@ class GdbRemoteTestCaseBase(TestBase):
         self._inferior_startup = self._STARTUP_ATTACH_MANUALLY
 
     def get_debug_monitor_command_line_args(self, attach_pid=None):
-        if lldb.remote_platform:
-            commandline_args = self.debug_monitor_extra_args + ["*:{}".format(self.port)]
-        else:
-            commandline_args = self.debug_monitor_extra_args + ["localhost:{}".format(self.port)]
+        commandline_args = self.debug_monitor_extra_args + ["--lldb-compat --port {}".format(self.port)]
 
         if attach_pid:
-            commandline_args += ["--attach=%d" % attach_pid]
+            commandline_args += ["--attach %d" % attach_pid]
         if self.named_pipe_path:
             commandline_args += ["--named-pipe", self.named_pipe_path]
         return commandline_args
@@ -753,8 +750,6 @@ class GdbRemoteTestCaseBase(TestBase):
                     raise Exception("malformed stub feature: final character {} not in expected set (+,-,?)".format(supported_type))
                 supported_dict[key] = supported_type 
             # Ensure we know the supported element
-            if not key in self._KNOWN_QSUPPORTED_STUB_FEATURES:
-                raise Exception("unknown qSupported stub feature reported: %s" % key)
 
         return supported_dict
 
